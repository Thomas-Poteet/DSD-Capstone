@page
@model InvoiceModel
@{
    ViewData["Title"] = "Create Invoice";
}

<head>
    <style>
        .buttonPress {
            transition: all 0.1s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .buttonPress:active {
            transform: translateY(1px);
            box-shadow: 0 2px 2px rgba(0, 0, 0, 0.2);
        }

        #txtInvoiceNumber {
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
            border-top-left-radius: .3rem;
            border-bottom-left-radius: .3rem;
        }

        #btnFill {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
            border-top-right-radius: .3rem;
            border-bottom-right-radius: .3rem;
        }
    </style>
</head>

<body id="invoicePage">
    <form class="h-100 mx-auto" style="max-width: 500px;">
        <div class="d-flex flex-column justify-content-between h-100 py-2 position-relative">
            @* Top Section *@
            <div>
                @* Top Section Title and Back Button*@
                <div class="pb-2">
                    <a id="btnBack" class="btn position-absolute px-0 shadow-none" asp-page="/Dashboard"><i
                            class="fa-solid fa-chevron-left"></i></a>
                    <button type="button" id="btnClear"
                        class="btn btn-danger py-1 mt-1 shadow-none buttonPress position-absolute end-0">Clear</button>
                    <h2 class="text-center"><span id="spnTitle">Save</span> Invoice</h2>
                </div>
                @* Top Section Inputs *@
                <div class="row">
                    <div class="col-7">
                        <label for="txtVendor">Vendor</label>
                        <input type="text" id="txtVendor" class="form-control rounded-3 py-0" list="dlVendors">
                        <datalist id="dlVendors">
                            @foreach (var vendor in Model.Vendors)
                            {
                                <option value="@vendor"></option>
                            }
                        </datalist>
                        <label for="txtInvoiceNumber" class="mt-1 d-flex">Invoice Number <button style="display: none;"
                                type="button" id="btnEditInvoiceNum"
                                class="btn p-0 ms-1 shadow-none align-items-center"><i
                                    style="font-size: 13px !important;"
                                    class="fa-regular fa-pen-to-square"></i></button></label>
                        <div class="d-flex">
                            <input type="text" id="txtInvoiceNumber" class="form-control py-0">
                            <button type="button" id="btnFill"
                                class="btn btn-secondary shadow-none py-0 buttonPress">Fill</button>
                        </div>
                    </div>
                    <div class="col-5">
                        <label for="txtDate">Date</label>
                        <input type="date" id="txtDate" class="form-control rounded-3 py-0">
                        <label for="txtVendorTotal" class="mt-1">Vendor Total</label>
                        <input disabled type="number" step="0.01" id="txtVendorTotal"
                            class="form-control rounded-3 py-0">
                    </div>
                </div>
                @* Card where UPC is entered. Will pop up count card after enter or Add Product button is pressed *@
                <div class="card p-2 mt-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <input disabled type="text" id="txtUPC" placeholder="UPC"
                                class="form-control rounded-3 py-0">
                        </div>
                        <div>
                            <button type="button" id="btnAddProduct"
                                class="btn btn-secondary py-1 shadow-none buttonPress">Add Product</button>
                        </div>
                    </div>
                </div>
            </div>
            @* Middle Section - This div is where Item Dropdowns are added *@
            <div id="divItemsCard" class="card px-2 pt-2 my-3 flex-grow-1 overflow-auto"></div>
            @* Bottom Section *@
            <div class="d-flex align-items-center">
                <div class="d-flex justify-content-between w-100 me-3">
                    <div class="d-flex flex-column justify-content-end">
                        <p class="m-0">Units: <span id="spnTotalUnits">0</span></p>
                        <p class="m-0">Gross Margin: <span id="spnTotalGrossMargin">0.00</span>%</p>
                    </div>
                    <div class="d-flex flex-column align-items-end">
                        <p class="m-0">Balance: $<span id="spnBalance">0.00</span></p>
                        <p class="m-0">Cost: $<span id="spnTotalCost">0.00</span></p>
                        <p class="m-0">Retail: $<span id="spnTotalRetail">0.00</span></p>
                    </div>
                </div>
            </div>
            <button type="button" id="btnSave" class="btn btn-primary h-auto shadow-none buttonPress mt-2">Save</button>
        </div>
    </form>
</body>

@section Scripts {
    <script>
        $(document).ready(function () {
            // date defualts to today
            $("#txtDate").val(getTodayDate());
            $("#txtDate").prop('disabled', true);

            numTotalUnits = 0;
            numTotalCost = 0;
            numTotalRetail = 0;
            arrUPCs = [];
            arrCounts = [];
            arrRetailCosts = [];
            arrAllowances = [];
            arrVendorCosts = [];
            arrNetCosts = [];
            

            // Fill in the invoice number and vendor if they are in the URL
            const urlParams = new URLSearchParams(window.location.search);
            const strInvoiceNumber = decodeURIComponent(urlParams.get('invoiceNumber'));
            const strVendor = decodeURIComponent(urlParams.get('vendor'));
            if (strInvoiceNumber !== "null" && strVendor !== "null") {
                $("#txtInvoiceNumber").val(strInvoiceNumber);
                $("#txtVendor").val(strVendor);
                $(window).on('load', function () {
                    $("#btnFill").click();
                });
                // Clear the parameters from the URL
                const newUrl = window.location.protocol + "//" + window.location.host + window.location.pathname;
                window.history.replaceState({}, document.title, newUrl);
            }

            // Clear all inputs and arrays when the Clear button is pressed
            $("#btnClear").on("click", function () {
                if ($("#spnTitle").text() === "Create") {
                    message = "This will discard the current invoice";
                } else if ($("#spnTitle").text() === "Update") {
                    message = "This will discard all changes";
                } else {
                    $("#txtVendor").val("");
                    $("#txtInvoiceNumber").val("");
                    return;
                }
                Swal.fire({
                    heightAuto: false,
                    icon: 'warning',
                    title: 'Are you sure?',
                    text: message,
                    showCancelButton: true,
                    confirmButtonText: 'Yes',
                    cancelButtonText: 'No'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $("#spnTitle").text("Save");
                        $("#txtVendor").val("");
                        $("#txtInvoiceNumber").val("");
                        $("#btnEditInvoiceNum").css("display", "none");
                        $("#txtDate").val(getTodayDate());
                        $("#txtVendorTotal").val("");
                        $("#txtUPC").val("");
                        $("#divItemsCard").empty();
                        $("#spnTotalUnits").text("0");
                        $("#spnTotalCost").text("0.00");
                        $("#spnTotalRetail").text("0.00");
                        $("#spnTotalGrossMargin").text("0.00");
                        $("#spnBalance").text("0.00");
                        $("#txtVendor").prop('disabled', false);
                        $("#txtInvoiceNumber").prop('disabled', false);
                        $("#txtDate").prop('disabled', true);
                        $("#txtVendorTotal").prop('disabled', true);
                        $("#txtUPC").prop('disabled', true);
                        $("#btnFill").prop('disabled', false);
                        numTotalUnits = 0;
                        numTotalCost = 0;
                        numTotalRetail = 0;
                        arrUPCs = [];
                        arrCounts = [];
                        arrAllowances = [];
                        arrRetailCosts = [];
                        arrVendorCosts = [];
                        arrNetCosts = [];
                    }
                });
            });

            // Lets the user change the invoice number when creating a new invoice
            $("#btnEditInvoiceNum").on("click", function () {
                Swal.fire({
                    heightAuto: false,
                    title: 'Edit Invoice Number',
                    input: 'text',
                    inputValue: $("#txtInvoiceNumber").val(),
                    showCancelButton: true,
                    confirmButtonText: 'Submit',
                    inputValidator: (value) => {
                        if (!value) {
                            return 'You need to enter an invoice number!';
                        }
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: '/Invoice?handler=Invoice',
                            method: 'GET',
                            data: {
                                vendorName: $("#txtVendor").val(),
                                invoiceID: result.value
                            },
                            success: function (response) {
                                if (response.success) {
                                    if (!response.duplicate) {
                                        $("#txtInvoiceNumber").val(result.value);
                                    } else {
                                        Swal.fire({
                                            heightAuto: false,
                                            icon: 'error',
                                            title: 'Invoice number already exists',
                                            text: 'Clear or save first if you want to edit a different invoice.'
                                        });
                                    }
                                } else {
                                    Swal.fire({
                                        heightAuto: false,
                                        icon: 'error',
                                        title: 'Error',
                                        text: 'Vendor not found'
                                    });
                                }
                            },
                            error: function () {
                                Swal.fire({
                                    heightAuto: false,
                                    icon: 'error',
                                    title: 'Error',
                                    text: 'Error changing invoice number'
                                });
                            }
                        })
                    }
                });
            });

            // Fills in invoice information if the invoice already exists. Otherwise just enables the inputs
            $("#btnFill").on("click", function () {
                const strVendor = $("#txtVendor").val();
                const strInvoiceNumber = $("#txtInvoiceNumber").val();

                if (strVendor === "" || strInvoiceNumber === "") {
                    Swal.fire({
                        heightAuto: false,
                        icon: 'error',
                        title: 'Error',
                        text: 'Please enter a vendor and invoice number'
                    });
                    return;
                }

                $.ajax({
                    url: '/Invoice?handler=FillInvoice',
                    method: 'GET',
                    data: {
                        vendorName: strVendor,
                        invoiceID: strInvoiceNumber
                    },
                    success: function (response) {
                        if (response.success) {
                            console.log(response);
                            $("#btnFill").prop('disabled', true);
                            $("#txtVendor").prop('disabled', true);
                            $("#txtInvoiceNumber").prop('disabled', true);
                            $("#txtDate").prop('disabled', false);
                            $("#txtVendorTotal").prop('disabled', false);
                            $("#txtUPC").prop('disabled', false);
                            if (!response.duplicate) {
                                $("#spnTitle").text("Create");
                                $("#btnEditInvoiceNum").css("display", "flex");
                            } else {
                                $("#spnTitle").text("Update");
                                $("#txtDate").val(response.date);
                                $("#spnTotalUnits").text(response.countTotal);
                                $("#spnTotalCost").text(response.vendorTotal.toFixed(2));
                                $("#txtVendorTotal").val(response.vendorTotal.toFixed(2));
                                $("#spnTotalRetail").text(response.retailTotal.toFixed(2));
                                $("#spnTotalGrossMargin").text(response.grossTotal.toFixed(2));
                                $("#spnBalance").text((0.00).toFixed(2));
                                for (let i = 0; i < response.arrUPCs.length; i++) {
                                    addExistingProduct(response.arrUPCs[i], response.arrCounts[i], response.arrVendorCost[i], response.arrRetailCost[i], response.arrNetCost[i], response.arrAllowances[i]);
                                }
                            }
                        } else {
                            Swal.fire({
                                heightAuto: false,
                                icon: 'error',
                                title: 'Error',
                                text: 'Vendor Not Found'
                            });
                        }
                    },
                    error: function () {
                        Swal.fire({
                            heightAuto: false,
                            icon: 'error',
                            title: 'Error',
                            text: 'Error filling invoice'
                        });
                    }
                });
            });

            // Adds a the product with the UPC in the txtUPC input to the invoice when the Add Product button is pressed
            $("#btnAddProduct").on("click", function () {
                // Get the UPC from the input
                const strUPC = $("#txtUPC").val();
                var vendorValue = $("#txtVendor").val();

                // check if the UPC is empty
                if (strUPC === "") {
                    Swal.fire({
                        heightAuto: false,
                        icon: 'error',
                        title: 'Error',
                        text: 'Please enter a UPC'
                    });
                    return;
                }

                //check if vendor has been selected
                if (vendorValue === "") {
                    Swal.fire({
                        heightAuto: false,
                        icon: 'error',
                        title: 'Error',
                        text: 'Please select a vendor'
                    });
                    return;
                }

                // Check if the UPC is already on the invoice by seeing if its in arrUPCs
                if (arrUPCs.includes(strUPC)) {
                    Swal.fire({
                        heightAuto: false,
                        icon: 'error',
                        title: 'Error',
                        text: 'Cannot add duplicate item to invoice'
                    });
                    $("#txtUPC").val("");
                    return;
                }
                //call the add product function to fetch product data and add it to invoice page
                addProduct($("#txtUPC").val());
            });

            //async function addProductCard()

            async function addExistingProduct(upc, count, vendor_cost, retail_cost, net_cost, allowance) {
                try {
                    const data = await $.ajax({
                        url: `/products/${upc}`,
                        method: 'GET'
                    });

                    const strItemName = data.name;
                    const dept_no = data.department;

                    const departmentResponse = await $.ajax({
                        url: `/departments/${dept_no}`,
                        method: 'GET'
                    });
                    const dept_name = departmentResponse.dept_name;
                    const numItemCost = vendor_cost;
                    const numItemRetail = retail_cost;
                    const numNetCost = net_cost;
                    const numVendorTotal = net_cost * count;
                    const numItemCount = count;
                    const numRetailTotal = retail_cost * count;
                    const numItemAllowance = allowance;

                    // Update the global variables
                    numTotalUnits += numItemCount;
                    numTotalCost += numNetCost * numItemCount;
                    numTotalRetail += numItemRetail * numItemCount;
                    arrUPCs.push(upc);
                    arrCounts.push(numItemCount);
                    arrRetailCosts.push(numItemRetail);
                    arrAllowances.push(numItemAllowance);
                    arrVendorCosts.push(numItemCost);
                    arrNetCosts.push(numNetCost);

                    $("#divItemsCard").append(`
                                    <div class="card p-2 mb-2">
                                        <div class="d-flex justify-content-between align-items-center cardHeader">
                                            <div>
                                                <p class="fw-bold m-0">${upc}</p>
                                                <p class="fw-bold m-0">${strItemName} - ${numItemCount}</p>
                                            </div>
                                            <div class="d-flex flex-column justify-content-between h-100">
                                                <button type="button" class="btnEdit btn p-0 shadow-none"><i
                                                        class="fa-regular fa-pen-to-square"></i></button>
                                                <i class="chevron fa-solid fa-chevron-down"></i>
                                            </div>
                                        </div>
                                        <div class="dropdownContent" style="display: none;">
                                            <div class="d-flex justify-content-between">
                                                <div class="d-flex flex-column align-items-start">
                                                    <p class="m-0">Cost:        $${numItemCost.toFixed(2)}</p>
                                                    <p class="m-0">Allowance: - $${numItemAllowance.toFixed(2)}</p>
                                                    <p class="m-0">Net Cost:    $${numNetCost.toFixed(2)}</p>
                                                    <p class="m-0">Total Cost: $${(numNetCost * numItemCount).toFixed(2)}</p>
                                                </div>
                                                <div class="d-flex flex-column align-items-end">
                                                    <p class="m-0">Department: ${dept_name}</p>
                                                    <p class="m-0">Retail: $${numItemRetail.toFixed(2)}</p>
                                                    <p class="m-0">Total Retail: $${(numItemRetail * numItemCount).toFixed(2)}</p>
                                                    <p class="m-0">Gross Margin: ${(((numItemRetail - numNetCost) / numItemRetail) * 100).toFixed(2)}%</p>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                `);
                } catch (error) {
                    Swal.fire({
                        heightAuto: false,
                        icon: 'error',
                        title: 'Error',
                        text: 'Error fetching products from invoice'
                    });
                }
            };

            async function addProduct(upc, numItemCount = -1) {
                try {
                    const vendorName = $("#txtVendor").val();

                    const vendorResponse = await $.ajax({
                        url: `/vendors/${vendorName}`,
                        method: 'GET'
                    });

                    const vendor_no = vendorResponse.vendor_no;

                    const vendorsProductResponse = await $.ajax({
                        url: `/vendorsProducts/${upc}/${vendor_no}`,
                        method: 'GET'
                    });
                    const vendor_cost = vendorsProductResponse.cost;

                    const data = await $.ajax({
                        url: `/products/${upc}`,
                        method: 'GET'
                    });

                    const strItemName = data.name;
                    const dept_no = data.department;

                    const departmentResponse = await $.ajax({
                        url: `/departments/${dept_no}`,
                        method: 'GET'
                    });

                    //this will be a list that will be parsed through
                    const allowanceResponse = await $.ajax({
                        url: `/Allowances/${upc}/${vendor_no}`,
                        method: 'GET'
                    });

                    //variables to find the total discount from allowances by parsing
                    var discount_total = 0.0;
                    var i = 0; 
                    while (i < allowanceResponse.length)
                    {
                        //adding up the the discount costs from the list
                        discount_total += allowanceResponse[i].discount_cost;
                        i++;
                    }
        
                    const numItemAllowance = discount_total;
                    const dept_name = departmentResponse.dept_name;
                  
                    if (numItemCount == -1) {
                        Swal.fire({
                            heightAuto: false,
                            title: strItemName,
                            input: 'number',
                            inputLabel: 'Enter Item Count',
                            inputAttributes: {
                                min: 1,
                                max: 999,
                                step: 1   // only integers
                            },
                            showCancelButton: true,
                            confirmButtonText: 'Submit',
                            inputValidator: (value) => {
                                if (isNaN(value) || value == "") {
                                    return 'You need to enter a number!';
                                }
                                if (value < 0) {
                                    return 'Count cannot be negative!';
                                }
                                if (value % 1 !== 0) {
                                    return 'Count must be a whole number!';
                                }
                                if (value == 0) {
                                    return 'Count must be greater than 0!';
                                }
                                if (value > 999) {
                                    return 'Count must be less than 1000!';
                                }
                            }
                          
                        }).then((result) => {
                            if (result.isConfirmed) {
                                numItemCount = parseInt(result.value);

                                // Placeholder for item cost
                                const numItemCost = vendor_cost;
                                const numItemRetail = data.price;
                                const numNetCost = numItemCost - numItemAllowance;

                                // Update the global variables
                                numTotalUnits += numItemCount;
                                numTotalCost += numNetCost * numItemCount;
                                numTotalRetail += numItemRetail * numItemCount;
                                arrUPCs.push(upc);
                                arrCounts.push(numItemCount);
                                arrRetailCosts.push(numItemRetail);
                                arrAllowances.push(numItemAllowance);
                                arrVendorCosts.push(numItemCost);
                                arrNetCosts.push(numNetCost);

                                // Update the total units, cost, and retail in the UI
                                $("#spnTotalUnits").text(numTotalUnits);
                                $("#spnTotalCost").text(numTotalCost.toFixed(2));
                                $("#spnTotalRetail").text(numTotalRetail.toFixed(2));
                                $("#spnTotalGrossMargin").text((((numTotalRetail - numTotalCost) / numTotalRetail) * 100).toFixed(2));
                                if ($("#txtVendorTotal").val() === '') {
                                    if (numTotalCost === 0) {
                                        $("#spnBalance").text((0.00).toFixed(2));
                                    }
                                    else {
                                        $("#spnBalance").text((0.00 - numTotalCost).toFixed(2));
                                    }
                                }
                                else {
                                    $("#spnBalance").text(($("#txtVendorTotal").val() - numTotalCost).toFixed(2));
                                }

                                // Add the product to the invoice
                                $("#divItemsCard").append(`
                                                <div class="card p-2 mb-2">
                                                    <div class="d-flex justify-content-between align-items-center cardHeader">
                                                        <div>
                                                            <p class="fw-bold m-0">${upc}</p>
                                                            <p class="fw-bold m-0">${strItemName} - ${numItemCount}</p>
                                                        </div>
                                                        <div class="d-flex flex-column justify-content-between h-100">
                                                            <button type="button" class="btnEdit btn p-0 shadow-none"><i
                                                                    class="fa-regular fa-pen-to-square"></i></button>
                                                            <i class="chevron fa-solid fa-chevron-down"></i>
                                                        </div>
                                                    </div>
                                                    <div class="dropdownContent" style="display: none;">
                                                        <div class="d-flex justify-content-between">
                                                            <div class="d-flex flex-column align-items-start">
                                                                <p class="m-0">Cost:        $${numItemCost.toFixed(2)}</p>
                                                                <p class="m-0">Allowance: - $${numItemAllowance.toFixed(2)}</p>
                                                                <p class="m-0">Net Cost:    $${numNetCost.toFixed(2)}</p>
                                                                <p class="m-0">Total Cost: $${(numNetCost * numItemCount).toFixed(2)}</p>
                                                            </div>
                                                            <div class="d-flex flex-column align-items-end">
                                                                <p class="m-0">Department: ${dept_name}</p>
                                                                <p class="m-0">Retail: $${numItemRetail.toFixed(2)}</p>
                                                                <p class="m-0">Total Retail: $${(numItemRetail * numItemCount).toFixed(2)}</p>
                                                                <p class="m-0">Gross Margin: ${(((numItemRetail - numNetCost) / numItemRetail) * 100).toFixed(2)}%</p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            `);
                                //clear txtUPC value
                                $("#txtUPC").val("");

                                return;
                            }
                        });
                    } else {
                        // Placeholder for item cost
                        const numItemCost = vendor_cost;
                        const numItemRetail = data.price;
                        const numNetCost = numItemCost - numItemAllowance;

                        // Update the total units, cost, retail, and add UPC to array
                        numTotalUnits += numItemCount;
                        numTotalCost += numNetCost * numItemCount;
                        numTotalRetail += numItemRetail * numItemCount;
                        arrUPCs.push(upc);
                        arrCounts.push(numItemCount);
                        arrRetailCosts.push(numItemRetail);
                        arrAllowances.push(numItemAllowance);
                        arrVendorCosts.push(numItemCost);
                        arrNetCosts.push(numNetCost);
                        if (arrUPCs.length === 1) {
                            $("#txtVendor").prop('disabled', true);
                        }

                        // Update the total units, cost, and retail in the UI
                        $("#spnTotalUnits").text(numTotalUnits);
                        $("#spnTotalCost").text(numTotalCost.toFixed(2));
                        $("#spnTotalRetail").text(numTotalRetail.toFixed(2));
                        $("#spnTotalGrossMargin").text((((numTotalRetail - numTotalCost) / numTotalRetail) * 100).toFixed(2));
                        if ($("#txtVendorTotal").val() === '') {
                            if (numTotalCost === 0) {
                                $("#spnBalance").text((0.00).toFixed(2));
                            }
                            else {
                                $("#spnBalance").text((0.00 - numTotalCost).toFixed(2));
                            }
                        }
                        else {
                            $("#spnBalance").text(($("#txtVendorTotal").val() - numTotalCost).toFixed(2));
                        }

                        // Add the product to the invoice
                        $("#divItemsCard").append(`
                                            <div class="card p-2 mb-2">
                                                <div class="d-flex justify-content-between align-items-center cardHeader">
                                                    <div>
                                                        <p class="fw-bold m-0">${upc}</p>
                                                        <p class="fw-bold m-0">${strItemName} - ${numItemCount}</p>
                                                    </div>
                                                    <div class="d-flex flex-column justify-content-between h-100">
                                                        <button type="button" class="btnEdit btn p-0 shadow-none"><i
                                                                class="fa-regular fa-pen-to-square"></i></button>
                                                        <i class="chevron fa-solid fa-chevron-down"></i>
                                                    </div>
                                                </div>
                                                <div class="dropdownContent" style="display: none;">
                                                    <div class="d-flex justify-content-between">
                                                        <div class="d-flex flex-column align-items-start">
                                                            <p class="m-0">Cost:        $${numItemCost.toFixed(2)}</p>
                                                            <p class="m-0">Allowance: - $${numItemAllowance.toFixed(2)}</p>
                                                            <p class="m-0">Net Cost:    $${numNetCost.toFixed(2)}</p>
                                                            <p class="m-0">Total Cost: $${(numNetCost * numItemCount).toFixed(2)}</p>
                                                        </div>
                                                        <div class="d-flex flex-column align-items-end">
                                                            <p class="m-0">Department: ${dept_name}</p>
                                                            <p class="m-0">Retail: $${numItemRetail.toFixed(2)}</p>
                                                            <p class="m-0">Total Retail: $${(numItemRetail * numItemCount).toFixed(2)}</p>
                                                            <p class="m-0">Gross Margin: ${(((numItemRetail - numNetCost) / numItemRetail) * 100).toFixed(2)}%</p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        `);
                        //clear txtUPC value
                        $("#txtUPC").val("");
                    }
                } catch (error) {
                    Swal.fire({
                        heightAuto: false,
                        icon: 'error',
                        title: 'Error',
                        text: 'Product not found or an error occurred'
                    });
                }
            };

            $("#btnSave").on("click", function () {
                // Get the vendor, invoice number, date, and vendor total from the inputs
                const strVendor = $("#txtVendor").val();
                const strInvoiceNumber = $("#txtInvoiceNumber").val();
                const strDate = $("#txtDate").val();
                const numVendorTotal = $("#txtVendorTotal").val();
                const numRetailTotal = parseFloat($("#spnTotalRetail").text());
                const numGross = parseFloat($("#spnTotalGrossMargin").text());
                const numBalance = parseFloat($("#spnBalance").text());

                var numTotalCount = 0.0;
                var i = 0;
                //add up the total number of items 
                while (i < arrCounts.length)
                {
                    numTotalCount += arrCounts[i];
                    i = i + 1;
                }; 

                // If any of the inputs are empty, show an error message and return
                if (strVendor === "" || strInvoiceNumber === "" || strDate === "" || numVendorTotal === "") {
                    Swal.fire({
                        heightAuto: false,
                        icon: 'error',
                        title: 'Error',
                        text: 'Please fill out all fields'
                    });
                    return;
                }

                // If there are no items in the invoice, show an error message and return
                if (numTotalUnits === 0) {
                    Swal.fire({
                        heightAuto: false,
                        icon: 'error',
                        title: 'Error',
                        text: 'Please add at least one item to the invoice'
                    });
                    return;
                }

                if (numBalance != 0.00) {
                    if (parseFloat(numVendorTotal).toFixed(2) < numTotalCost.toFixed(2)) {
                        strMessage = `Vendor total is less than Invoice total by $${Math.abs(numBalance).toFixed(2)}`;
                    } else {
                        strMessage = `Vendor total is greater than Invoice total by $${numBalance.toFixed(2)}`;
                    }
                    Swal.fire({
                        heightAuto: false,
                        icon: 'error',
                        title: strMessage,
                        text: "Are you sure you want to save?",
                        showCancelButton: true,
                        confirmButtonText: 'Yes',
                        cancelButtonText: 'No'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            saveInvoice(strInvoiceNumber, strVendor, strDate, numVendorTotal, numRetailTotal, numGross, numTotalCount);

                        } else if (result.dismiss === Swal.DismissReason.cancel) {
                            return;
                        }
                    });
                }
                else {
                    saveInvoice(strInvoiceNumber, strVendor, strDate, numVendorTotal, numRetailTotal, numGross, numTotalCount);
                }
            });

            $(document).on('click', '.btnEdit', function (event) {
                // Prevent the dropdown from opening
                event.stopPropagation();

                // Get the item name and button that was clicked
                const btnEdit = $(this);
                strItemName = $(this).closest('.cardHeader').find('p').eq(1).text().split(" - ")[0];

                // SweetAlert to edit the item count
                Swal.fire({
                    heightAuto: false,
                    title: strItemName,
                    input: 'number',
                    inputLabel: 'Enter Item Count',
                    inputValue: $(this).closest('.cardHeader').find('p').eq(1).text().split(" - ")[1],
                    inputAttributes: {
                        min: 1,
                        max: 999,
                        step: 1   // only integers
                    },
                    showCancelButton: true,
                    confirmButtonText: 'Submit',
                    denyButtonText: 'Delete',
                    showDenyButton: true,
                    html: `
                        <button id="btnEditCost" class="swal2-confirm swal2-styled" style="background-color: #f39c12;">Edit Cost</button>
                    `,
                    didRender: function() {
                        // Add a button to edit the item cost
                        $('#btnEditCost').appendTo($('.swal2-actions'));

                        // Style the sweetalert
                        $('.swal2-html-container').css('padding', '0');
                        $('.swal2-input-label').css('margin', '0');
                        $('.swal2-input').css('margin-top', '.4rem');
                        $('.swal2-title').css('margin-bottom', '.2rem');

                        // SweetAlert to edit the item cost
                        $('#btnEditCost').on('click', function() {
                            Swal.fire({
                                heightAuto: false,
                                title: strItemName,
                                input: 'number',
                                inputLabel: 'Enter Item Cost',
                                inputValue: $(btnEdit).closest('.card').find('.dropdownContent p').eq(0).text().split("$")[1],
                                inputAttributes: {
                                    min: 0.00,
                                    max: 999,
                                    step: 0.01
                                },
                                showCancelButton: true,
                                confirmButtonText: 'Submit',
                                didOpen: () => {
                                    const input = Swal.getInput();

                                    input.addEventListener('input', function() {
                                        let value = input.value;
                                        
                                        // adds a leading 0 if the user starts with a decimal
                                        if (value.startsWith('.')) {
                                            input.value = "0" + value;
                                        }
                                        
                                        value = input.value;

                                        // limits the input to 2 decimal places
                                        if (value.includes('.')) {
                                            const decimalPart = value.split(".")[1];
                                            if (decimalPart.length > 2) {
                                                input.value = value.slice(0, value.indexOf('.') + 3);
                                            }
                                        }
                                    })
                                },
                                didRender: function () {
                                    // Add a button to edit the item count
                                    $('<button id="btnEditCount" class="swal2-cancel swal2-styled" style="background-color: #f39c12;">Edit Count</button>').appendTo($('.swal2-actions'));
                                    
                                    // Style the sweetalert
                                    $('.swal2-html-container').css('padding', '.2rem 4rem 0 4rem');
                                    $('.swal2-input-label').css('margin', '0');
                                    $('.swal2-input').css('margin-top', '.4rem');
                                    $('.swal2-title').css('margin-bottom', '.2rem');

                                    // Switch back to edit count when the button is clicked
                                    $('#btnEditCount').on('click', function () {
                                        Swal.close();
                                        btnEdit.trigger('click');
                                    });
                                },
                                inputValidator: (value) => {
                                    if (isNaN(value) || value == "") {
                                        return 'You need to enter a price!';
                                    }
                                    if (value < 0) {
                                        return 'Cost cannot be negative!';
                                    }
                                    if (!(/^\d+(\.\d{1,2})?$/.test(value))) {
                                        return 'Cost must be to 2 decimal places!';
                                    }
                                    if (value == 0) {
                                        return 'Cost must be greater than 0!';
                                    }
                                }
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    // Get the new item cost
                                    numItemCost = parseFloat(result.value);

                                    // Check if the item is in a product group and get the products if it is
                                    $.ajax({
                                        url: '/Invoice?handler=GroupProducts',
                                        method: 'GET',
                                        data: {
                                            UPC: $(btnEdit).closest('.cardHeader').find('p').eq(0).text(),
                                            VendorName: $("#txtVendor").val()
                                        },
                                        headers: {
                                            RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                                        },
                                        success: function (response) {
                                            if (response.success && response.group) {
                                                // Show a sweet alert to see if the user wants to change the whole group
                                                Swal.fire({
                                                    heightAuto: false,
                                                    title: 'Would you like to update the cost for all products in this group to $' + numItemCost.toFixed(2) + '?',
                                                    showDenyButton: true,
                                                    confirmButtonText: 'Yes',
                                                    denyButtonText: 'No',
                                                    html: `
                                                        <div style="max-height: 250px; overflow-y: auto; border: 1px solid #ddd;">
                                                            <table style="width: 100%; border-collapse: collapse; text-align: left; table-layout: fixed;">
                                                            <tbody>
                                                                ${response.groupProducts.map(product => `
                                                                    <tr>
                                                                        <td style="border-bottom: 1px solid #ddd; padding: 8px; word-wrap: break-word; width: 75%;">${product.name}</td>
                                                                        <td style="border-bottom: 1px solid #ddd; padding: 8px; word-wrap: nowrap; width: 25%;">$${product.cost.toFixed(2)}</td>
                                                                    </tr>
                                                                `).join('')}
                                                            </tbody>
                                                            </table>
                                                        </div>
                                                    `
                                                }).then((result) => {
                                                    EditGroup = false;
                                                    if (result.isConfirmed) {
                                                        EditGroup = true;
                                                    }
                                                    editCost($(btnEdit).closest('.cardHeader').find('p').eq(0).text(), numItemCost, EditGroup);
                                                })
                                            } else if (response.success) {
                                                editCost($(btnEdit).closest('.cardHeader').find('p').eq(0).text(), numItemCost);
                                            }
                                        }
                                    })
                                }
                            });
                        });
                    },
                    inputValidator: (value) => {
                        if (isNaN(value) || value == "") {
                            return 'You need to enter a number!';
                        }
                        if (value < 0) {
                            return 'Count cannot be negative!';
                        }
                        if (value % 1 !== 0) {
                            return 'Count must be a whole number!';
                        }
                        if (value == 0) {
                            return 'Count must be greater than 0!';
                        }
                        if (value > 999) {
                            return 'Count must be less than 1000!';
                        }
                    }
                }).then((result) => {
                    // If the user confirmed the count change
                    if (result.isConfirmed) {
                        // Get the item count, previous item count, and difference
                        const strUPC = $(this).closest('.cardHeader').find('p').eq(0).text();
                        const numPrevItemCount = parseInt($(this).closest('.cardHeader').find('p').eq(1).text().split(" - ")[1]);
                        const numItemCount = result.value;
                        const numDifference = numItemCount - numPrevItemCount;

                        // Get the item cost and retail
                        const numItemCost = parseFloat($(this).closest('.card').find('.dropdownContent p').eq(2).text().split("$")[1]);
                        const numItemRetail = parseFloat($(this).closest('.card').find('.dropdownContent p').eq(5).text().split("$")[1]);

                        // Update the total units, cost, and retail
                        numTotalUnits += numDifference;
                        numTotalCost += numItemCost * numDifference;
                        numTotalRetail += numItemRetail * numDifference;

                        // Update the item count in the array
                        const index = arrUPCs.indexOf(strUPC);
                        arrCounts[index] = numItemCount;

                        // Update the total units, cost, retail, gross margin, and Balance in the UI
                        $("#spnTotalUnits").text(numTotalUnits);
                        $("#spnTotalCost").text(numTotalCost.toFixed(2));
                        $("#spnTotalRetail").text(numTotalRetail.toFixed(2));
                        $("#spnTotalGrossMargin").text((((numTotalRetail - numTotalCost) / numTotalRetail) * 100).toFixed(2));
                        if ($("#txtVendorTotal").val() === '') {
                            if (numTotalCost === 0) {
                                $("#spnBalance").text((0.00).toFixed(2));
                            }
                            else {
                                $("#spnBalance").text((0.00 - numTotalCost).toFixed(2));
                            }
                        }
                        else {
                            $("#spnBalance").text(($("#txtVendorTotal").val() - numTotalCost).toFixed(2));
                        }

                        // Update the dropdown content with the new item count and totals
                        $(this).closest('.cardHeader').find('p').eq(1).text(`${strItemName} - ${numItemCount}`);
                        $(this).closest('.card').find('.dropdownContent p').eq(3).text(`Total Cost: $${(numItemCost * numItemCount).toFixed(2)}`);
                        $(this).closest('.card').find('.dropdownContent p').eq(6).text(`Total Retail: $${(numItemRetail * numItemCount).toFixed(2)}`);
                    }
                    else if (result.isDenied) {
                        // confirm the user want to Delete the item
                        Swal.fire({
                            heightAuto: false,
                            icon: 'warning',
                            title: 'Are you sure you want to delete this item?',
                            showCancelButton: true,
                            confirmButtonText: 'Yes',
                            cancelButtonText: 'No'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                const strUPC = $(this).closest('.cardHeader').find('p').eq(0).text();
                                const numItemCount = parseInt($(this).closest('.cardHeader').find('p').eq(1).text().split(" - ")[1]);
                                const numItemCost = parseFloat($(this).closest('.card').find('.dropdownContent p').eq(2).text().split("$")[1]);
                                const numItemRetail = parseFloat($(this).closest('.card').find('.dropdownContent p').eq(5).text().split("$")[1]);

                                // Update the total units, cost, and retail
                                numTotalUnits -= numItemCount;
                                numTotalCost -= numItemCost * numItemCount;
                                numTotalRetail -= numItemRetail * numItemCount;

                                // Update the item count in the array
                                const index = arrUPCs.indexOf(strUPC);
                                arrUPCs.splice(index, 1);
                                arrCounts.splice(index, 1);
                                arrRetailCosts.splice(index, 1);
                                arrAllowances.splice(index, 1);
                                arrVendorCosts.splice(index, 1);
                                arrNetsCosts.splice(index, 1);

                                // Update the total units, cost, retail, and gross margin in the UI
                                if (arrUPCs.length === 0) {
                                    $("#spnTotalGrossMargin").text("0.00");
                                    $("#spnTotalCost").text("0.00");
                                    $("#spnTotalRetail").text("0.00");
                                    numTotalCost = 0;
                                    numTotalRetail = 0;
                                }
                                else {
                                    $("#spnTotalGrossMargin").text((((numTotalRetail - numTotalCost) / numTotalRetail) * 100).toFixed(2));
                                    $("#spnTotalCost").text(numTotalCost.toFixed(2));
                                    $("#spnTotalRetail").text(numTotalRetail.toFixed(2));
                                }

                                // Update the total units, cost, retail, and gross margin in the UI
                                $("#spnTotalUnits").text(numTotalUnits);
                                if ($("#txtVendorTotal").val() === '') {
                                    if (numTotalCost === 0) {
                                        $("#spnBalance").text((0.00).toFixed(2));
                                    }
                                    else {
                                        $("#spnBalance").text((0.00 - numTotalCost).toFixed(2));
                                    }
                                }
                                else {
                                    $("#spnBalance").text(($("#txtVendorTotal").val() - numTotalCost).toFixed(2));
                                }

                                // Remove the item from the invoice
                                $(this).closest('.card').remove();
                            }
                        });
                    }
                });
            });

            $('#txtVendorTotal').on('input', function () {
                if ($(this).val() === '') {
                    if (numTotalCost === 0) {
                        $("#spnBalance").text((0.00).toFixed(2));
                    }
                    else {
                        $("#spnBalance").text((0.00 - numTotalCost).toFixed(2));
                    }
                }
                else {
                    const numBalance = $(this).val() - numTotalCost;
                    $("#spnBalance").text(Math.abs(numBalance) < 0.009 ? "0.00" : numBalance.toFixed(2));
                }
            });

            // Toggles item dropdowns
            $(document).on('click', '.cardHeader', function () {
                $(this).next('.dropdownContent').slideToggle();
                $(this).find('.chevron').toggleClass('fa-chevron-up fa-chevron-down');
            });

            // Function to get today's date in YYYY-MM-DD format
            function getTodayDate() {
                const today = new Date();
                const year = today.getFullYear();
                const month = String(today.getMonth() + 1).padStart(2, '0'); // Months are 0-based, so add 1
                const day = String(today.getDate()).padStart(2, '0');
                return `${year}-${month}-${day}`;
            }

            function editCost(strUPC, numItemCost, EditGroup = false) {
                // Update cost in VendorsProducts for all products in the product group unless EditGroup is false
                $.ajax({
                    url: '/Invoice?handler=EditCost',
                    method: 'POST',
                    data: {
                        UPC: strUPC,
                        Cost: numItemCost,
                        VendorName: $("#txtVendor").val(),
                        EditGroup: EditGroup
                    },
                    headers: {
                        RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            // Loop through all items currently in the invoice
                            $('.cardHeader').each(function () {
                                // check if the UPC is in the product group
                                if (response.groupProducts.includes($(this).find('p').eq(0).text())) {
                                    // Get the item count, retail, and difference in cost
                                    numItemCount = parseInt($(this).find('p').eq(1).text().split(" - ")[1]);
                                    numItemRetail = parseFloat($(this).closest('.card').find('.dropdownContent p').eq(5).text().split("$")[1]);
                                    numDifference = numItemCost - parseFloat($(this).closest('.card').find('.dropdownContent p').eq(0).text().split("$")[1]);
                                    numItemAllowance = parseFloat($(this).closest('.card').find('.dropdownContent p').eq(1).text().split("$")[1]);
                                    numNetCost = numItemCost - numItemAllowance;

                                    // Update the vendor cost and net cost in the arrays
                                    const index = arrUPCs.indexOf($(this).find('p').eq(0).text());
                                    arrVendorCosts[index] = numItemCost;
                                    arrNetCosts[index] = numNetCost;

                                    // Update the total cost
                                    numTotalCost += numDifference * numItemCount;

                                    // Update the total cost, gross margin, and balance in the UI
                                    $("#spnTotalCost").text(numTotalCost.toFixed(2));
                                    $("#spnTotalGrossMargin").text((((numTotalRetail - numTotalCost) / numTotalRetail) * 100).toFixed(2));
                                    if ($("#txtVendorTotal").val() === '') {
                                        if (numTotalCost === 0) {
                                            $("#spnBalance").text((0.00).toFixed(2));
                                        }
                                        else {
                                            $("#spnBalance").text((0.00 - numTotalCost).toFixed(2));
                                        }
                                    }
                                    else {
                                        $("#spnBalance").text(($("#txtVendorTotal").val() - numTotalCost).toFixed(2));
                                    }

                                    // Update the item cost, total cost, and gross margin in the dropdown
                                    $(this).closest('.card').find('.dropdownContent p').eq(0).text(`Cost: $${numItemCost.toFixed(2)}`);
                                    $(this).closest('.card').find('.dropdownContent p').eq(2).text(`Net Cost: $${numNetCost.toFixed(2)}`);
                                    $(this).closest('.card').find('.dropdownContent p').eq(3).text(`Total Cost: $${(numNetCost * numItemCount).toFixed(2)}`);
                                    $(this).closest('.card').find('.dropdownContent p').eq(7).text(`Gross Margin: ${(((numItemRetail - numNetCost) / numItemRetail) * 100).toFixed(2)}%`);

                                    Swal.fire({
                                        heightAuto: false,
                                        icon: 'success',
                                        title: 'Cost Updated'
                                    });
                                }
                            });
                        } else {
                            Swal.fire({
                                heightAuto: false,
                                icon: 'error',
                                title: 'Error',
                                text: 'Error updating cost'
                            });
                        }
                    },
                });
            }

            function saveInvoice(strInvoiceNumber, strVendor, strDate, numVendorTotal, numRetailTotal, numGross, numTotalCount) {
                $.ajax({
                    url: '/Invoice',
                    method: 'POST',
                    data: {
                        InvoiceID: strInvoiceNumber,
                        VendorName: strVendor,
                        Date: strDate,
                        VendorTotal: parseFloat(numVendorTotal),
                        RetailTotal: parseFloat(numRetailTotal),
                        Gross: numGross,
                        CountTotal: numTotalCount,
                        UPCs: arrUPCs,
                        Counts: arrCounts,
                        RetailCosts: arrRetailCosts,
                        Allowances: arrAllowances,
                        VendorCosts: arrVendorCosts,
                        NetCosts: arrNetCosts,
                        Update: false
                    },
                    headers: {
                        RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            Swal.fire({
                                heightAuto: false,
                                icon: 'success',
                                title: 'Success',
                                text: 'Invoice created successfully'
                            });
                        } else if (response.duplicate) {
                            Swal.fire({
                                heightAuto: false,
                                icon: 'warning',
                                title: "Invoice already exists",
                                text: 'Do you want to update the existing invoice?',
                                showCancelButton: true,
                                confirmButtonText: 'Confirm',
                                cancelButtonText: 'Cancel'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    $.ajax({
                                        url: '/Invoice',
                                        method: 'POST',
                                        data: {
                                            InvoiceID: strInvoiceNumber,
                                            VendorName: strVendor,
                                            Date: strDate,
                                            VendorTotal: parseFloat(numVendorTotal),
                                            RetailTotal: parseFloat(numRetailTotal),
                                            Gross: numGross,
                                            CountTotal: numTotalCount,
                                            UPCs: arrUPCs,
                                            Counts: arrCounts,
                                            RetailCosts: arrRetailCosts,
                                            Allowances: arrAllowances,
                                            VendorCosts: arrVendorCosts,
                                            NetCosts: arrNetCosts,
                                            Update: true
                                        },
                                        headers: {
                                            RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                                        },
                                        success: function (response) {
                                            if (response.success) {
                                                Swal.fire({
                                                    heightAuto: false,
                                                    icon: 'success',
                                                    title: 'Success',
                                                    text: 'Invoice updated successfully'
                                                });
                                            }
                                        },
                                        error: function () {
                                            Swal.fire({
                                                heightAuto: false,
                                                icon: 'error',
                                                title: 'Error',
                                                text: 'Error saving invoice'
                                            });
                                        }
                                    });
                                } else if (result.dismiss === Swal.DismissReason.cancel) {
                                    return;
                                }
                            });
                        }
                    },
                    error: function () {
                        Swal.fire({
                            heightAuto: false,
                            icon: 'error',
                            title: 'Error',
                            text: 'Error saving invoice'
                        });
                    }
                });
            }
        });

    </script>
}