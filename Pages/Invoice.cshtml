@page
@model InvoiceModel
<head>
    <style>
        .buttonPress{
            transition: all 0.1s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .buttonPress:active{
            transform: translateY(1px);
            box-shadow: 0 2px 2px rgba(0, 0, 0, 0.2);
        }
    </style>
</head>
<body id="invoicePage">
    <form class="h-100">
        <div class="d-flex flex-column justify-content-between h-100 py-2">
            @* Top Section *@
            <div>
                @* Top Section Title and Back Button*@
                <div class="pb-2">
                    <button id="btnBack" type="button" class="btn position-absolute start-0 border-0 shadow-none"><i
                            class="fa-solid fa-chevron-left"></i></button>
                    <h2 class="text-center"><span id="spnCreateEdit">Create</span> Invoice</h2>
                </div>
                @* Top Section Inputs *@
                <div class="row">
                    <div class="col-7">
                        <label for="txtVendor">Vendor</label>
                        <input type="text" id="txtVendor" class="form-control rounded-3 py-0" list="dlVendors">
                        <datalist id="dlVendors">
                            @foreach (var vendor in Model.Vendors)
                            {
                                <option value="@vendor"></option>
                            }
                        </datalist>
                        <label for="txtInvoiceNumber" class="mt-1">Invoice Number</label>
                        <input type="text" id="txtInvoiceNumber" class="form-control rounded-3 py-0">
                    </div>
                    <div class="col-5">
                        <label for="txtDate">Date</label>
                        <input type="date" id="txtDate" class="form-control rounded-3 py-0">
                        <label for="txtVendorTotal" class="mt-1">Vendor Total</label>
                        <input type="number" id="txtVendorTotal" class="form-control rounded-3 py-0">
                    </div>
                </div>
                @* Card where UPC is entered. Will pop up count card after enter or Add Product button is pressed *@
                <div class="card p-2 mt-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <input type="text" id="txtUPC" placeholder="UPC" class="form-control rounded-3 py-0">
                        </div>
                        <div>
                            <button type="button" class="btn btn-secondary py-1 shadow-none buttonPress">Add Product</button>
                        </div>
                    </div>
                </div>
            </div>
            @* Middle Section - This div is where Item Dropdowns should be added *@
            @* Everything within this div should be deleted when backend is implemented *@
            <div id="divItemsCard" class="card px-2 pt-2 my-3 h-100 overflow-auto"></div>
            @* Bottom Section *@
            <div class="d-flex align-items-center">
                <div class="d-flex justify-content-between w-100 me-5">
                    <div>
                        <p class="m-0">Units: <span id="spnTotalUnits">0</span></p>
                        <p class="m-0">Gross Margin: <span id="spnTotalGrossMargin">0.00</span>%</p>
                    </div>
                    <div class="d-flex flex-column align-items-end">
                        <p class="m-0">Cost: $<span id="spnTotalCost">0.00</span></p>
                        <p class="m-0">Retail: $<span id="spnTotalRetail">0.00</span></p>
                    </div>
                </div>
                <button type="button" class="btn btn-primary h-auto shadow-none buttonPress">Save</button>
            </div>
        </div>
    </form>
</body>

@section Scripts {
    <script>
        $(document).ready(function () {
            // date defualts to today
            $("#txtDate").val(getTodayDate());


            // Will probably need this wherever we allow the user to search for invoices by number
        @* // array of all invoice numbers as strings so we can go through them and filter when the user types
            let arrInvoiceNumbers = @Json.Serialize(Model.InvoiceNumbers);

            // filtering invoice numbers by startsWith instead of contains
            $("#txtInvoiceNumber").on("input", function(){
            var strInputVal = $('#txtInvoiceNumber').val().toLowerCase(); // Get the input value in lowercase
            var strOptions = '';

            if (strInputVal !== '') {
            // Iterate over all invoices and filter based on the input value
            arrInvoiceNumbers.forEach(function(strInvoiceNumber) {
            if ((strInvoiceNumber.toLowerCase()).startsWith(strInputVal)) {
            strOptions += '<option value="' + strInvoiceNumber + '" />';
            }
            });
            $('#dlInvoices').html(strOptions);
            } else {
            // If the input is empty, clear the invoice list
            $("#dlInvoices").empty();
            }
            }); *@
        })

        // Function to get today's date in YYYY-MM-DD format
        function getTodayDate() {
            const today = new Date();
            const year = today.getFullYear();
            const month = String(today.getMonth() + 1).padStart(2, '0'); // Months are 0-based, so add 1
            const day = String(today.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }

        // Toggles item dropdowns
        $(document).on('click', '.cardHeader', function() {
            $(this).next('.dropdownContent').slideToggle();
            $(this).find('i').toggleClass('fa-chevron-up fa-chevron-down');
        })
    </script>
}