@page
@model DashboardModel
@{
    ViewData["Title"] = "Dashboard";
}

<head>
    <style>
        /* Reuse the buttonPress style from the invoice creation page */
        .buttonPress {
            transition: all 0.1s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .buttonPress:active {
            transform: translateY(1px);
            box-shadow: 0 2px 2px rgba(0, 0, 0, 0.2);
        }

    </style>
</head>

<body>
    <!-- Navbar -->
    <nav class="navbar navbar-light bg-light">
        <div class="container-fluid">
            <span>
                <img src="~/images/scenic_logo.PNG" alt="Logo" width="60" height="60" class="d-inline-block align-text-top">
            </span>
            <div>
                <button id="btnCreateInvoice" class="btn btn-dark me-2">Create Invoice</button>
                <button id="btnLogout" class="btn btn-danger">Logout</button>
            </div>
        </div>
    </nav>

    @Html.AntiForgeryToken()

    <!-- Search form -->
    <div class="container mt-3">
        <div class="row">
            <div class="col-md-4">
                <label for="txtVendor">Vendor</label>
                <input type="text" id="txtVendor" class="form-control rounded-3 py-0" list="dlVendors">
                <datalist id="dlVendors">
                    @foreach (var vendor in Model.Vendors)
                    {
                        <option value="@vendor"></option>
                    }
                </datalist>
            </div>
            <div class="col-md-3">
                <label for="start-date">Start Date</label>
                <input type="date" id="start-date" class="form-control">
            </div>
            <div class="col-md-3">
                <label for="end-date">End Date</label>
                <input type="date" id="end-date" class="form-control">
            </div>
            <div class="col-md-2">
                <label for="invoice-number">Invoice Number</label>
                <input type="text" id="invoice-number" class="form-control">
            </div>
        </div>
        <div class="mt-3 d-flex justify-content-between">
            <button type="button" class="btn btn-dark" id="btnSearch">Search</button>
            <button type="button" class="btn btn-dark" id="btnPrintAll">Print All</button>
        </div>
    </div>

    <!-- Invoices Table -->
    <div class="container mt-3">
        <table id="invoiceTable" class="table table-bordered">
            <thead>
                <tr>
                    <th>Invoice Number</th>
                    <th>Vendor Name</th>
                    <th>Employee Number</th> <!-- Added emp_no -->
                    <th>Date</th>
                    <th>Print/Delete</th>
                </tr>
            </thead>
            <tbody>
                <!-- Invoices will be dynamically inserted here -->
            </tbody>
        </table>
    </div>
</body>

@section Scripts{
    <script>
    $(document).ready(function() {

        $("#btnCreateInvoice").click(function () {
            window.location.href = "/invoice";
        });

        // Fetch invoices when "Search" button is clicked
        $('#btnSearch').on('click', function() {
    const vendorId = $('#txtVendor').val();
    const startDate = $('#start-date').val();
    const endDate = $('#end-date').val();
    const InvoiceID = $('#invoice-number').val();

    // Check if the start date is later than the end date
    if (new Date(startDate) > new Date(endDate)) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Start date cannot be later than end date',
            willOpen: () => {
                document.body.style.setProperty('height', '100%', 'important');
            }
        });
        return;
    }

    // Perform an AJAX request to fetch filtered invoices
    $.ajax({
        url: `/Invoices/${InvoiceID}`, // Dynamic URL with InvoiceID
        method: 'GET',
        success: function(invoices) {
            // Clear the previous invoice table
            $('#invoiceTable tbody').empty();

            if (invoices.length === 0) {
                Swal.fire({
                    icon: 'info',
                    title: 'No Invoices',
                    text: 'No invoices found for the selected criteria',
                    willOpen: () => {
                        document.body.style.setProperty('height', '100%', 'important');
                    }
                });
                return;
            }

            console.log(invoices);

            // Check if invoices is an array, if not, wrap it as an array
            if (!Array.isArray(invoices)) {
                invoices = [invoices];
            }

            invoices.forEach((invoice) => {
                let invoiceRow = `
                    <tr>
                        <td>${invoice.invoiceID}</td>
                        <td>${invoice.vendor_no}</td>
                        <td>${invoice.emp_no}</td>
                        <td>${new Date(invoice.date).toLocaleDateString()}</td>
                        <td>
                            <button id="btnEditInvoice" class="btn btn-secondary">Edit</button>
                            <button id="btnPrintInvoice" class="btn btn-secondary">Print</button>
                        </td>
                    </tr>
                `;
                // Append the invoice row to the table
                $('#invoiceTable tbody').append(invoiceRow);
            });
        },
        error: function(xhr, status, error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred while fetching invoices',
                willOpen: () => {
                    document.body.style.setProperty('height', '100%', 'important');
                }
            });
        }
    });
});

        $("#btnLogout").click(function () {
            // Calls the OnPostLogoutAsync method in Dashboard.cshtml.cs
            $.ajax({
                url: '/Dashboard?handler=Logout',
                method: 'POST',
                headers: {
                    RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    if (response.success) {
                        window.location.href = "/Login";
                    } else {
                        Swal.fire({
                            heightAuto: false,
                            icon: 'error',
                            title: 'Failed to destroy session',
                            showConfirmButton: false,
                            timer: 1000
                        });
                    }
                },
                error: function () {
                    Swal.fire({
                        heightAuto: false,
                        icon: 'error',
                        title: 'Error destroying session',
                        showConfirmButton: false,
                        timer: 1000
                    });
                }
            });
        });
    });
    </script>
}
