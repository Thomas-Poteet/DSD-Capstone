@page
@model DashboardModel
@{
    ViewData["Title"] = "Dashboard";
}

<head>
    <style>
        /* Reuse the buttonPress style from the invoice creation page */
        .buttonPress {
            transition: all 0.1s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .buttonPress:active {
            transform: translateY(1px);
            box-shadow: 0 2px 2px rgba(0, 0, 0, 0.2);
        }
        .dt-control {
            cursor: pointer;
            text-align: center;
            width: 30px; /* Adjust as needed */
        }
    </style>
    <link rel="stylesheet" href="~/css/datatables.min.css" />
</head>

<body>
    <!-- Navbar -->
    <nav class="navbar navbar-light bg-light">
        <div class="container-fluid">
            <span>
                <img src="~/images/scenic_logo.PNG" alt="Logo" width="60" height="60" class="d-inline-block align-text-top">
            </span>
            <div>
                <button id="btnCreateInvoice" class="btn btn-dark me-2">Create Invoice</button>
                <button id="btnLogout" class="btn btn-danger">Logout</button>
            </div>
        </div>
    </nav>
@Html.AntiForgeryToken()
    <div class="container mt-3">
        <div class="row">
            <h4>Filter Invoices</h4>
            <p class="text-muted">Select either Vendor or Date Range to filter</p>
            <!-- Vendor Filter Section -->
            <div class="col-md-4">
                <div class="filter-group border p-3 rounded">
                    <label for="txtVendor">Vendor</label>
                    <input type="text" id="txtVendor" class="form-control rounded-3" list="dlVendors">
                    <datalist id="dlVendors">
                        @foreach (var vendor in Model.Vendors)
                        {
                            <option value="@vendor"></option>
                        }
                    </datalist>
                </div>
            </div>
            <!-- Date Range Filter Section -->
            <div class="col-md-4">
                <div class="filter-group border p-3 rounded">
                    <label for="txtStartDate">Start Date</label>
                    <input type="date" id="txtStartDate" class="form-control rounded-3">
                    <label for="txtEndDate">End Date</label>
                    <input type="date" id="txtEndDate" class="form-control rounded-3">
                </div>
            </div>
        </div>
        <div class="mt-3">
            <button type="button" class="btn btn-dark" id="btnSearch">Filter</button>
        </div>
    </div>
    <hr>

    <!-- Invoices Table -->
    <div class="" style="max-width: 90%;">
        <table id="invoiceTable" class="table table-bordered">
            <thead>
                <tr>
                    <th></th>
                    <th>Invoice Number</th>
                    <th>Vendor</th>
                    <th>Total</th>
                    <th>Employee</th>
                    <th>Date</th>
                </tr>
            </thead>
            <tbody>
                <!-- Invoices will be dynamically inserted here -->
            </tbody>
        </table>
    </div>

    @section Scripts {
        <script src="~/js/datatables.min.js"></script>
        <script>
            $(document).ready(function() {
                $('#txtVendor').on('focus', function() {
                    // Clear the vendor value when the field is focused
                    $(this).val('');
                    $('#txtVendor').trigger('input');  // Trigger the input event to re-enable date inputs
                });
                // Event handler for the "Create Invoice" button
                $("#btnCreateInvoice").click(function () {
                    window.location.href = "/invoice";
                });

                // Disable date inputs if vendor is selected, and vice versa
                $('#txtVendor').on('input', function() {
                    const hasVendor = $(this).val() !== "";
                    $('#txtStartDate, #txtEndDate').prop('disabled', hasVendor);
                });

                $('#txtStartDate, #txtEndDate').on('input', function() {
                    const hasDate = $('#txtStartDate').val() !== "" || $('#txtEndDate').val() !== "";
                    $('#txtVendor').prop('disabled', hasDate);
                });

                // Initial DataTable setup
                  let table = $('#invoiceTable').DataTable({
                    dom: 'Bfrtip',
                    buttons: [
                        {
                            extend: 'print',
                            text: 'Print',
                            className: 'btn btn-dark buttonPress'
                        }
                    ],
                    columnDefs: [
                        { orderable: false, className: 'dt-control', targets: 0 }  // Arrow column
                    ],
                    searching: true,
                    fixedHeader: true,
                    stateSave: true,
                    select: {
                        style: 'os',
                        selector: 'td:first-child',
                        blurable: true
                    }
                });

                // Add arrow icon to each row's first cell
                $('#invoiceTable tbody').on('click', 'td.dt-control', function () {
                    const tr = $(this).closest('tr');
                    const row = table.row(tr);

                    if (row.child.isShown()) {
                        // Close row details
                        row.child.hide();
                        tr.removeClass('shown');
                        $(this).html('<i class="bi bi-chevron-right"></i>'); // Reset arrow icon to right
                    } else {
                        // Show row details with Edit and Print buttons in dropdown
                        console.log(row.data());
                        row.child(formatRowDetails(row.data())).show();
                        tr.addClass('shown');
                        $(this).html('<i class="bi bi-chevron-down"></i>'); // Set arrow icon to down
                    }
                });

                // Event handler for the "Search" button
                $('#btnSearch').on('click', function() {
                    const vendorId = $('#txtVendor').val();
                    const startDate = $('#txtStartDate').val();
                    const endDate = $('#txtEndDate').val();

                    // Check that only one filter (vendor or date range) is selected
                    if (vendorId && (startDate || endDate)) {
                        Swal.fire({
                            icon: 'info',
                            title: 'Error',
                            text: 'Please filter by either Vendor or Date Range, not both.'
                        });
                        return;
                    }

                    // Fetch invoices based on the selected filter
                    if (vendorId) {
                        // Filter by Vendor
                        fetchInvoicesByVendor(vendorId);
                    } else if (startDate && endDate) {
                        // Filter by Date Range
                        fetchInvoicesByDateRange(startDate, endDate);
                    } else {
                        Swal.fire({
                            icon: 'info',
                            title: 'Error',
                            text: 'Please fill out either the Vendor field or both Date fields.'
                        });
                    }
                    // Clear the fields and unlock them
                    $('#txtVendor').val('').prop('disabled', false);
                    $('#txtStartDate').val('').prop('disabled', false);
                    $('#txtEndDate').val('').prop('disabled', false);
                });

                // Fetch vendor_no from name
                function fetchInvoicesByVendor(vendorId) {
                    $.ajax({
                        url: `/vendors/${vendorId}`,
                        method: 'GET',
                        success: function(vendor) {
                            const vendor_no = vendor.vendor_no;

                            // Fetch invoices for the selected vendor
                            $.ajax({
                                url: `/InvoicesByVendor/${vendor_no}`,
                                method: 'GET',
                                success: function(invoices) {

                                    updateTable(invoices, vendorId);
                                },
                                error: function() {
                                    showError('Error fetching invoices by vendor.');
                                }
                            });
                        },
                        error: function() {
                            showError('Error fetching vendor details.');
                        }
                    });
                }

                // Fetch invoices within the selected date range
                function fetchInvoicesByDateRange(startDate, endDate) {
                // Validate date range
                if(endDate < startDate) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'End date cannot be earlier than start date.'
                    });
                    return;
                }
                $.ajax({
                    url: `/InvoicesByDate/${startDate}/${endDate}`,
                    method: 'GET',
                    success: function(invoices) {
                        const ajaxPromises = invoices.map((invoice) => {
                            return $.ajax({
                                url: `/VendorByNum/${invoice.vendor_no}`,
                                method: 'GET',
                                success: function(vendor) {
                                    invoice.vendor = vendor.name; // Add vendor name to invoice
                                },
                                error: function() {
                                    showError('Error fetching vendor details.');
                                }
                            });
                        });

                        // Wait for all vendor details to be fetched
                        Promise.all(ajaxPromises).then(() => {
                            updateTable(invoices);
                        }).catch(() => {
                            showError('Error fetching vendor details.');
                        });
                    },
                    error: function() {
                        showError('Error fetching invoices by date range.');
                    }
                });
            }
                

                // Update the DataTable with the retrieved invoices
                function updateTable(invoices, vendorId = "") {
                    if (invoices.length === 0) {
                        Swal.fire({
                            icon: 'info',
                            title: 'No Invoices',
                            text: 'No invoices found for the selected criteria.'
                        });
                        return;
                    }
                    table.clear().destroy();
                    $('#invoiceTable tbody').empty();

                    // Insert invoices into the table
                    let invoicePromises = invoices.map((invoice) => {
                        return $.ajax({
                            url: `/Employees/${invoice.emp_no}`,
                            method: 'GET',
                            success: function(employee) {
                                const invoiceRow = `
                                    <tr data-retail="${invoice.retail_total}" 
                                        data-gross="${invoice.gross}" 
                                        data-margin="${invoice.vendor_total} - ${invoice.retail_total}" 
                                        data-count="${invoice.count}">

                                        <td class="dt-control"><i class="bi bi-chevron-right"></i></td>
                                        <td>${invoice.invoiceID}</td>
                                        <td>${vendorId || invoice.vendor}</td>
                                        <td>$${invoice.vendor_total}</td>
                                        <td>${employee.firstName} ${employee.lastName}</td>
                                        <td>${invoice.date}</td>

                                    </tr>
                                `;
                                $('#invoiceTable tbody').append(invoiceRow);
                            },
                            error: function() {
                                showError('Error fetching employee details.');
                            }
                        });
                    });

                    // Reinitialize DataTable after all rows are inserted
                    Promise.all(invoicePromises).then(() => {
                        table = $('#invoiceTable').DataTable({
                            dom: 'Bfrtip',
                            buttons: [
                                {
                                    extend: 'print',
                                    text: 'Print',
                                    className: 'btn btn-dark buttonPress'
                                }
                            ],
                            columnDefs: [
                                { orderable: false, className: 'dt-control', targets: 0 }  // Arrow column
                            ],
                            searching: true,
                            fixedHeader: true,
                            scrollY: '50vh',
                            stateSave: true,
                            select: {
                                style: 'os',
                                selector: 'td:first-child',
                                blurable: true
                            }
                        });
                    });
                }

                // Function to format the details row with Edit/Print buttons
                function formatRowDetails(data) {
                    return `
                        <div class="row p-3">
                            <div class="col-md-6">
                                <strong>Gross:</strong> X% <br>
                                <strong>Margin:</strong> $X
                            </div>
                            <div class="col-md-6">
                                <strong>Units:</strong> X <br>
                                <strong>Cost:</strong> $X <br>
                                <strong>Retail:</strong> $X
                            </div>
                            <div class="col-md-12 mt-2">
                                <button class="btn btn-secondary me-2" id="btnEditInvoice">Edit</button>
                                <button class="btn btn-secondary" id="btnPrintInvoice">Print</button>
                            </div>
                        </div>
                    `;
                }

                // Display error message
                function showError(message) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: message
                    });
                }

                // Event handler for the "Logout" button
                $("#btnLogout").click(function () {
                    $.ajax({
                        url: '/Dashboard?handler=Logout',
                        method: 'POST',
                        headers: {
                            RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function (response) {
                            if (response.success) {
                                window.location.href = "/Login";
                            } else {
                                Swal.fire({
                                    heightAuto: false,
                                    icon: 'error',
                                    title: 'Failed to destroy session',
                                    showConfirmButton: false,
                                    timer: 1000
                                });
                            }
                        },
                        error: function () {
                            Swal.fire({
                                heightAuto: false,
                                icon: 'error',
                                title: 'Error destroying session',
                                showConfirmButton: false,
                                timer: 1000
                            });
                        }
                    });
                });
            });
        </script>
    }
</body>