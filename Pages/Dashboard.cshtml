@page
@model DashboardModel
@{
    ViewData["Title"] = "Dashboard";
}

<head>
    <style>
        /* Reuse the buttonPress style from the invoice creation page */
        .buttonPress {
            transition: all 0.1s ease;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .buttonPress:active {
            transform: translateY(1px);
            box-shadow: 0 2px 2px rgba(0, 0, 0, 0.2);
        }
    </style>
    <link rel="stylesheet" href="~/css/datatables.min.css" />
</head>

<body>
    <!-- Navbar -->
    <nav class="navbar navbar-light bg-light">
        <div class="container-fluid">
            <span>
                <img src="~/images/scenic_logo.PNG" alt="Logo" width="60" height="60" class="d-inline-block align-text-top">
            </span>
            <div>
                <button id="btnCreateInvoice" class="btn btn-dark me-2">Create Invoice</button>
                <button id="btnLogout" class="btn btn-danger">Logout</button>
            </div>
        </div>
    </nav>

    @Html.AntiForgeryToken()

    <!-- Search form with only Vendor selection -->
    <div class="container mt-3">
        <div class="row">
            <h4>Filter Invoices</h4>
            <p class="text-muted">Select either Vendor or Date Range to filter</p>
            <!-- Vendor Filter Section -->
            <div class="col-md-4">
                <div class="filter-group border p-3 rounded">
                    <label for="txtVendor">Vendor</label>
                    <input type="text" id="txtVendor" class="form-control rounded-3" list="dlVendors">
                    <datalist id="dlVendors">
                        @foreach (var vendor in Model.Vendors)
                        {
                            <option value="@vendor"></option>
                        }
                    </datalist>
                </div>
            </div>
            <!-- Date Range Filter Section -->
            <div class="col-md-4">
                <div class="filter-group border p-3 rounded">
                    <label for="txtStartDate">Start Date</label>
                    <input type="date" id="txtStartDate" class="form-control rounded-3">
                    <label for="txtEndDate">End Date</label>
                    <input type="date" id="txtEndDate" class="form-control rounded-3">
                </div>
            </div>
        </div>
        <div class="mt-3">
            <button type="button" class="btn btn-dark" id="btnSearch">Filter</button>
        </div>
    </div>
    <hr>

    <!-- Invoices Table -->
    <div class="container mt-3">
        <table id="invoiceTable" class="table table-bordered">
            <thead>
                <tr>
                    <th>Invoice Number</th>
                    <th>Vendor</th>
                    <th>Total</th>
                    <th>Employee</th>
                    <th>Date</th>
                    <th>Edit/Print</th>
                </tr>
            </thead>
            <tbody>
                <!-- Invoices will be dynamically inserted here -->
            </tbody>
        </table>
    </div>

    @section Scripts {
        <script src="~/js/datatables.min.js"></script>
        <script>
            $(document).ready(function() {
                // Disable date inputs if vendor is selected, and vice versa
                $('#txtVendor').on('input', function() {
                    const hasVendor = $(this).val() !== "";
                    $('#txtStartDate, #txtEndDate').prop('disabled', hasVendor);
                });

                $('#txtStartDate, #txtEndDate').on('input', function() {
                    const hasDate = $('#txtStartDate').val() !== "" || $('#txtEndDate').val() !== "";
                    $('#txtVendor').prop('disabled', hasDate);
                });
                // Initial DataTable setup (empty on page load)
                let table = $('#invoiceTable').DataTable({
                    dom: 'Bfrtip',
                    buttons: [], // No buttons like print, copy, etc.
                    searching: true,  // Enable searching
                    fixedHeader: true,
                    responsive: true,
                    scrollY: 400,
                    scrollCollapse: true,
                    stateSave: true,
                    selection: true
                });

                // Event handler for the "Create Invoice" button
                $("#btnCreateInvoice").click(function () {
                    window.location.href = "/invoice";
                });
                
                // Fetch invoices when "Search" button is clicked
                $('#btnSearch').on('click', function() {
                    const vendorId = $('#txtVendor').val();

                    // Check if a vendor was selected
                    if (!vendorId) {
                        Swal.fire({
                            icon: 'info',
                            title: 'Error',
                            text: 'Please select a vendor.'
                        });
                        return;
                    }

                    // Perform an AJAX request to fetch vendor number
                    $.ajax({
                        url: `/vendors/${vendorId}`,
                        method: 'GET',
                        success: function(vendor) {
                            const vendor_no = vendor.vendor_no;

                            // Fetch invoices for the selected vendor
                            $.ajax({
                                url: `/InvoicesByVendor/${vendor_no}`,
                                method: 'GET',
                                success: function(invoices) {
                                    // Destroy the existing DataTable instance
                                    table.clear().destroy();

                                    // Clear the previous invoice table
                                    $('#invoiceTable tbody').empty();

                                    // Check if there are no invoices
                                    if (invoices.length === 0) {
                                        Swal.fire({
                                            icon: 'info',
                                            title: 'No Invoices',
                                            text: 'No invoices found for that vendor'
                                        });
                                        return;
                                    }

                                    // Dynamically insert fetched invoices into the table
                                    let invoicePromises = invoices.map((invoice) => {
                                        return $.ajax({
                                            url: `/Employees/${invoice.emp_no}`,
                                            method: 'GET',
                                            success: function(employee) {
                                                let invoiceRow = `
                                                    <tr>
                                                        <td>${invoice.invoiceID}</td>
                                                        <td>${vendorId}</td>
                                                        <td>$${invoice.vendor_total}</td>
                                                        <td>${employee.firstName} ${employee.lastName}</td>
                                                        <td>${invoice.date}</td>
                                                        <td>
                                                            <button id="btnEditInvoice" class="btn btn-secondary">Edit</button>
                                                            <button id="btnPrintInvoice" class="btn btn-secondary">Print</button>
                                                        </td>
                                                    </tr>
                                                `;
                                                // Append the invoice row to the table body
                                                $('#invoiceTable tbody').append(invoiceRow);
                                            },
                                            error: function(xhr, status, error) {
                                                Swal.fire({
                                                    icon: 'error',
                                                    title: 'Error',
                                                    text: 'An error occurred while fetching employee details'
                                                });
                                            }
                                        });
                                    });

                                    // Wait for all invoice rows to be inserted before reinitializing DataTable
                                    Promise.all(invoicePromises).then(() => {
                                        table = $('#invoiceTable').DataTable({
                                            dom: 'Bfrtip',
                                            buttons: [], // No buttons like print, copy, etc.
                                            searching: true,
                                            fixedHeader: true,
                                            responsive: true,
                                            scrollY: 400,
                                            scrollCollapse: true,
                                            stateSave: true,
                                            selection: true
                                        });
                                    });
                                },
                                error: function(xhr, status, error) {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: 'An error occurred while fetching invoices'
                                    });
                                }
                            });
                        },
                        error: function(xhr, status, error) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'An error occurred while fetching vendor details'
                            });
                        }
                    });
                });

                // Event handler for the "Logout" button
                $("#btnLogout").click(function () {
                    $.ajax({
                        url: '/Dashboard?handler=Logout',
                        method: 'POST',
                        headers: {
                            RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function (response) {
                            if (response.success) {
                                window.location.href = "/Login";
                            } else {
                                Swal.fire({
                                    heightAuto: false,
                                    icon: 'error',
                                    title: 'Failed to destroy session',
                                    showConfirmButton: false,
                                    timer: 1000
                                });
                            }
                        },
                        error: function () {
                            Swal.fire({
                                heightAuto: false,
                                icon: 'error',
                                title: 'Error destroying session',
                                showConfirmButton: false,
                                timer: 1000
                            });
                        }
                    });
                });
            });
        </script>
    }
</body>
